name: Build, Test, and Deploy Model

on:
  push:
    branches:
      - main  # Runs this pipeline whenever code is pushed to the main branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Set up MLflow Authentication
        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
          APP_MODEL_NAME: ${{ secrets.APP_MODEL_NAME }}
        run: |
          echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_USERNAME=$MLFLOW_TRACKING_USERNAME" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_PASSWORD=$MLFLOW_TRACKING_PASSWORD" >> $GITHUB_ENV
          echo "APP_MODEL_NAME=$APP_MODEL_NAME" >> $GITHUB_ENV
          echo "All environment variables are now exported."

      - name: Debug Environment Variables
        run: |
          echo "MLFLOW_TRACKING_URI: $MLFLOW_TRACKING_URI"
          echo "APP_MODEL_NAME: $APP_MODEL_NAME"
        

      - name: Debug Paths
        run: |
          echo "Current Working Directory: $(pwd)"
          echo "Repository Contents:"
          ls -R

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$PWD:$PWD/ProjectA3" >> $GITHUB_ENV
          echo "PYTHONPATH set to: $PWD:$PWD/ProjectA3"

      - name: Debug MLflow Model Versions
        run: |
          python -c "
          from mlflow.tracking import MlflowClient;
          client = MlflowClient();
          versions = client.search_model_versions(\"name='st124783-a3-model'\");
          for v in versions: print(f'Model: {v.name}, Version: {v.version}, Stage: {v.current_stage}')
          "

      - name: Run Model Tests
        run: |
          source $GITHUB_ENV  # Ensure environment variables are loaded
          pytest ProjectA3/test_model.py

      #  COMMENTED OUT DOCKER BUILD & PUSH TEMPORARILY
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Build and Push Docker Image
      #   run: |
      #     docker build -t binit13/model-a3:latest .
      #     docker tag binit13/model-a3:latest binit13/model-a3:${{ github.run_number }}
      #     docker push binit13/model-a3:latest
      #     docker push binit13/model-a3:${{ github.run_number }}

  transition-to-production:
    needs: build-and-test  # KEEP THIS LINE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Set up MLflow Authentication
        run: |
          echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_USERNAME=${{ secrets.MLFLOW_TRACKING_USERNAME }}" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_PASSWORD=${{ secrets.MLFLOW_TRACKING_PASSWORD }}" >> $GITHUB_ENV

      - name: Set PYTHONPATH
        run: |
          echo "PYTHONPATH=$PWD:$PWD/ProjectA3" >> $GITHUB_ENV
          echo "PYTHONPATH set to: $PWD:$PWD/ProjectA3"

      - name: Debug Transition Python Path
        run: python -c "import sys; print(sys.path)"

      - name: Transition Best Model to Production
        run: |
          source $GITHUB_ENV
          python ProjectA3/transition.py

  deploy:
    needs: transition-to-production  # Deploys only if transition was successful
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key and config
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/st124783
          chmod 600 ~/.ssh/st124783
      
          cat << 'EOF' > ~/.ssh/config
          Host bazooka
            HostName bazooka.cs.ait.ac.th
            User st124783
            IdentityFile ~/.ssh/st124783
      
          Host ml2023
            HostName ml.brain.cs.ait.ac.th
            User st124783
            IdentityFile ~/.ssh/st124783
            ProxyJump bazooka
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF
          chmod 600 ~/.ssh/config
      
          # Only scan bazooka since ml2023 skips host key checking
          ssh-keyscan -p 22 -H bazooka.cs.ait.ac.th >> ~/.ssh/known_hosts 2>/dev/null || echo "Warning: Failed to scan bazooka host key"
          chmod 600 ~/.ssh/known_hosts
          echo "ssh i am in"

      - name: SSH and Deploy to Server
        run: |
          ssh -v st124783@ml2023 <<EOF
          if [ ! -d "/home/st124783" ]; then
          echo " ERROR: Directory /home/st124783 does not exist on the server!"
          exit 1
          fi
          cd /home/st124783 || { echo "ERROR: Unable to navigate to /home/st124783!"; exit 1; }
          # cd ~/st124783
          docker compose -f docker-compose-deploy.yaml down
          docker pull binit13/model-a3:latest
          docker compose -f docker-compose-deploy.yaml up -d
          EOF